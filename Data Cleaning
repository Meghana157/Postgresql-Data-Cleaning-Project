--Data Cleaning

-- https://www.kaggle.com/datasets/swaptr/layoffs-2022

create table layoffs_table(
	company varchar(100),
	location varchar(50),
	industry varchar(50),
	total_laid_off int,
	percentage_laid_off decimal,
	date date,
	stage varchar(50),
	country varchar(100),
	funds_raised_millions int	
);

ALTER TABLE layoffs_table
ALTER COLUMN percentage_laid_off TYPE NUMERIC;


set datestyle = 'MDY';

copy layoffs_table from 'C:\Program Files\PostgreSQL\16\data\Data_copy\layoffs.csv'
delimiter ','
csv header
NULL 'NULL';

select * from layoffs_table;

--1.Remove duplicates
--2.Standardize the data
--3.Null values or blank values
--4.Remove unneccesary columns

-- first thing we want to do is create a staging table. This is the one we will work in and clean the data. We want a table with the raw data in case something happens.

create table layoffs_staging
(like layoffs_table including all);

select * from layoffs_staging;

insert into layoffs_staging
select * from layoffs_table;

-- 1. Remove Duplicates

select *,
row_number() over(
partition by company,industry,total_laid_off,percentage_laid_off,"date") as row_no
from layoffs_staging;

with duplicate_cte as
(
select *,
row_number() over(
partition by company,location,industry,total_laid_off,percentage_laid_off,"date",stage,country,funds_raised_millions) as row_no
from layoffs_staging	
)
select *
from duplicate_cte
where row_no > 1;

select *
from layoffs_staging
where company = 'Casper';

delete
from duplicate_cte
where row_no >1;


-- these are the ones we want to delete where the row number is > 1.

with cte as(
	select *,
	row_number() over(
	partition by company,industry,total_laid_off,percentage_laid_off,"date") as row_num
from layoffs_staging
)
delete from layoffs_staging
where company in (
	select company from cte where row_num >1
);


--Standardizing data

select company,trim(company) 
from layoffs_staging;

update layoffs_staging
set company=trim(company);

select distinct industry
from layoffs_staging
order by industry;

-- I also noticed the Crypto has multiple different variations. We need to standardize it

select * 
from layoffs_staging
where industry like 'Crypto%';

update layoffs_staging
set industry = 'Crypto'
where industry like 'Crypto%';

select distinct location
from layoffs_staging
order by location;

select distinct country
from layoffs_staging
order by country;

select *
from layoffs_staging
where country like 'United States%'
order by country;

select distinct country,
trim(Trailing '.' from country)
from layoffs_staging
order by country;

update layoffs_staging
set country=trim(Trailing '.' from country)
where country like 'United States%';

alter table layoffs_staging
alter column "date" type DATE;

select *
from layoffs_staging
where total_laid_off is null
and percentage_laid_off is null;

-- now if we check those are all null

select *
from layoffs_staging
where industry is null
or industry = '';

select *
from layoffs_staging
where company = 'Airbnb';

select *
from layoffs_staging t1
join layoffs_staging t2
	on t1.company=t2.company
where (t1.industry is null or t1.industry = '')
and t2.industry is not null
order by t2.company;

update layoffs_staging
set industry = NULL
where industry = '';

-- now we need to populate those nulls if possible

update layoffs_staging t1
set industry = t2.industry
from layoffs_staging t2
where t1.company = t2.company
and t1.industry IS NULL
and t2.industry IS NOT NULL;

select *
from layoffs_staging
where company like 'Bally%';

select *
from layoffs_staging
where total_laid_off is null
and percentage_laid_off is null;

delete 
from layoffs_staging
where total_laid_off is null
and percentage_laid_off is null;

select *
from layoffs_staging;

